@page "/reward"
@attribute [Authorize]
@using Application.Accounts.Query
@using Application.Coupons.Command
@using Application.Coupons.Query
@using Domain.Entities
@using MediatR
@using Web.Services
@inject IMediator Mediator
@inject ISnackbar Snackbar
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject AccountService AccountService

<PageTitle>Reward</PageTitle>

<MudGrid>
    <MudItem xs="12" sm="8">
        <MudPaper Height="100%" Elevation="4">
            <MudText Typo="Typo.h5" Class="pt-4 pb-12" Align="Align.Center">Daily Streak</MudText>
            <MudTimeline TimelineOrientation="TimelineOrientation.Horizontal">
                <MudTimelineItem Color="FirstGoalLine" Variant="Variant.Filled">
                    <ItemContent>
                        <MudAlert Severity="FirstGoalText" ContentAlignment="HorizontalAlignment.Center" Variant="Variant.Filled">500 NX</MudAlert>
                    </ItemContent>
                    <ItemOpposite>
                        <MudText Color="FirstGoalLine">1 day</MudText>
                    </ItemOpposite>
                </MudTimelineItem>
                <MudTimelineItem Color="SecondGoalLine" Variant="Variant.Filled" TimelineAlign="TimelineAlign.End">
                    <ItemContent>
                        <MudAlert Severity="SecondGoalText" ContentAlignment="HorizontalAlignment.Center" Variant="Variant.Filled">700 NX</MudAlert>
                    </ItemContent>
                    <ItemOpposite>
                        <MudText Color="SecondGoalLine">14 days</MudText>
                    </ItemOpposite>
                </MudTimelineItem>
                <MudTimelineItem Color="ThirdGoalLine" Variant="Variant.Filled">
                    <ItemContent>
                        <MudAlert Severity="ThirdGoalText" ContentAlignment="HorizontalAlignment.Center" Variant="Variant.Filled">1000 NX</MudAlert>
                    </ItemContent>
                    <ItemOpposite>
                        <MudText Color="ThirdGoalLine">30+ days</MudText>
                    </ItemOpposite>
                </MudTimelineItem>
            </MudTimeline>
        </MudPaper>
    </MudItem>
    <MudItem xs="12" sm="4">
        <MudStack Spacing="4">
            <MudPaper Class="d-flex gap-4 flex-column align-center pa-4" Elevation="4">
                <MudText Typo="Typo.h5">Daily Claim</MudText>
                <MudText Typo="Typo.body1">Daily reward reset at 12:00 AM everyday.</MudText>
                <MudText Typo="Typo.body2">Don't miss your daily reward ;).</MudText>
                <MudButton OnClick="Claim" Disabled="!canClaim" Variant="Variant.Filled" Color="Color.Primary" FullWidth="true">CLAIM !</MudButton>
            </MudPaper>

            <MudPaper Class="d-flex gap-4 flex-column align-center pa-4" Elevation="4">
                <MudText Typo="Typo.h5">Enter coupon</MudText>
                <MudTextField FullWidth="true" T="string" @bind-Value="couponInput" Label="Coupon" Variant="Variant.Outlined"
                              Required="true" RequiredError="Coupon code is required" OnlyValidateIfDirty="true" />
                <MudButton Variant="Variant.Filled" Color="Color.Primary" FullWidth="true" OnClick="Redeem">REDEEM</MudButton>
            </MudPaper>
        </MudStack>
    </MudItem>
</MudGrid>

@code {
    private Account? user;
    private string? couponInput;
    private bool canClaim;
    private int claimAmount => user?.Streak switch
    {
        >= 30 => 1000,
        >= 14 => 700,
        _ => 500
    };


    private Color FirstGoalLine => user != null && user.Streak >= 1 ? Color.Success : Color.Default;
    private Severity FirstGoalText => FirstGoalLine == Color.Success ? Severity.Success : Severity.Info;
    private Color SecondGoalLine => user != null && user.Streak >= 14 ? Color.Success : Color.Default;
    private Severity SecondGoalText => SecondGoalLine == Color.Success ? Severity.Success : Severity.Info;
    private Color ThirdGoalLine => user != null && user.Streak >= 30 ? Color.Success : Color.Default;
    private Severity ThirdGoalText => ThirdGoalLine == Color.Success ? Severity.Success : Severity.Info;

    protected override void OnInitialized()
    {
        user = AccountService.Account;
        if (user == null)
        {
            Snackbar.Add("Account not found, try login again.", Severity.Error);
            return;
        }

        canClaim = user.LastRedeem.HasValue ? DateTime.Now.Date != user.LastRedeem.Value.Date : true;
    }


    private async Task Claim()
    {
        try
        {
            var coupon = await Mediator.Send(new InsertCouponCommand(1, 500));

            if (coupon == null)
            {
                throw new Exception("Unkown error when claim");
            }

            var result = await Mediator.Send(new RedeemCouponCommand(1, coupon, 500));

            if (result)
            {
                canClaim = false;
                Snackbar.Add("Claim successfully", Severity.Success);
            }
            else
            {
                Snackbar.Add("Claim failed", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
    }

    private async Task Redeem()
    {
        try
        {
            if (string.IsNullOrWhiteSpace(couponInput))
            {
                throw new Exception("Coupon code is not valid");
            }

            var coupon = await Mediator.Send(new GetCouponQuery(user!.Id, couponInput));

            if (coupon == null)
            {
                throw new Exception("Unkown error when claim");
            }

            var result = await Mediator.Send(new RedeemCouponCommand(1, coupon.Code, coupon.Amount, false));

            if (result)
            {
                canClaim = false;
                Snackbar.Add("Claim successfully", Severity.Success);
            }
            else
            {
                throw new Exception("Claim failed");
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
    }
}
